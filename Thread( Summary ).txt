스레드:
자바 애플리케이션은 메인(main) 스레드가 main() 메소드를 실행시킨다.
작업 스레드 클래스는 Thread 클래스를 상속해서 만들 수 있다.
Runnable 객체는 스레드가 실행해야할 코드를 가지고 있는 객체라고 볼 수 있다.
스레드를 실행을 시작하려면 start() 메소드를 호출해야 한다.


스레드 우선순위:
우선 순위가 높은 스레드가 실행 기회를 더 많이 가질 수 있다.
우선 순위는 1부터 10까지를 줄 수 있는데 디폴트는 5이다.
Thread 클래스는 NORM_PRIORITY, MIN_PRIORITY, MAX_PRIORITY 상수를 제공한다.
1은 가장 낮은 우선 순위이기 때문에 다른 스레드보다 실행 기회를 더 적게 갖는다.


동기화 메소드와 동기화 블록:
동기화 메소드와 동기화 블록은 싱글 스레드 환경에서는 필요없다.
스레드가 동기화 메소드를 실행할 때 다른 스레드는 일반 메소드를 호출할 수 있다.
스레드가 동기화 메소드를 실행할 때 다른 스레드는 다른 동기화 메소드를 호출할 수 없다.
스레드가 동기화 블록을 실해할 때 다른 스레드는 다른 동기화 메소드를 호출할 수 없다.


스레드 일시정지 상태:
일시 정지 상태는 BLOCKED, WAITING, TIMED_WAITING이 있다.
스레드가 동기화 메소드를 실행할 때 다른 스레드가 다른 동기화 메소드를 호출하게 되면
다른 스레드는 BLOCKED 일시정지 상태가 된다.
동기화 메소드내에서 wait()를 호출하면 WAITING 일시정지 상태가 된다.
sleep() 메소드를 호출하면 TIMED_WAITING 일시정지 상태가 된다.


스레드 상태제어:
yeild() 메소드를 호출한 스레드는 동일한 우선순위나 높은 우선순위의 스레드에게 실행한다.
sleep() 메소드를 호출한 스레드는 주어진 시간동안 일시정지 상태가 된다.
stop() 메소드는 스레드를 즉시 종료 시키기 때문에 스레드 안정성에 좋지 못하다.
join 메소드를 멤버로 가지는 스레드는 join()을 호출받은 스레드가 run() 메소드를 전부 실행할 때까지 일시정지


interrupt() 메소드를 호출한 효과:
일시정지 상태에서 InterruptedException을 발생시킨다.
실행 대기 상태에서 호출되면 일시정지 상태가 될 때까지 InterruptException이 발생하지 않는다.
아직 InterruptException이 발생하지 않았다면 interrupted(), isinterrupted() 메소드는 true를 리턴한다.
스레드 그룹에서 interrupt()메소드를 호출하면 모든 스레드에서 interrupt()가 호출되어 모든 스레드들을 종료한다.


while문으로 반복적인 작업을 하는 스레드를 종료시키는 방법:
조건식에 boolean 타입의 stop 플래그를 이용해서 while문을 빠져나간다.
스레드가 반복적으로 일시정지 상태가 된다면 InterruptedException을 발생시켜서,
예외처리 코드에서 break문으로 while문을 빠져나가게 한다.
스레드가 일시정지 상태로 가지 않는다면 isInterrupted(), Interrupted() 메소드의 리턴값을 조사해서,
true일 경우break문으로 while문을 빠져나가게 한다.


스레드풀에 대한 설명:
갑작스러운 작업의 증가로 스레드의 폭증을 막기위해 사용
ExecutorService 객체가 스레드풀이며 newFixedThreadPool() 메소드로 얻을 수 있다.
작업은 Runnable 또는 Callable 인터페이스를 구현해서 정의한다.
submit() 메소드는 작업큐에 작업을 넣고나서 즉시 리턴한다.
Future.get() 메소드를 호출하면 작업처리요청을 하면 스레드가 작업이 완료될 때까지 블로킹된다.


Future 객체에 대한 설명:
Future는 스레드가 작업을 완료할 때까지 기다렸다가 결과값을 얻는 지연객체, 지연완료객체이다.
submit() 메소드를 호출하면 즉시 리턴되는 객체이다.
Future의 get() 메소드는 스레드가 작업을 완료하기 전까지 블로킹된다.
CompletionService를 이용하면 작업 완료된 순으로 Future를 얻을 수 있다.